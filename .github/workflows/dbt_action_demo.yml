# name: workflows migration prd

# concurrency: "1"

# on:
#   push:
#     branches:
#       - promote_workflows_prd
#     paths:
#       - "**/*.yml"
#       - "**/*.py"

# jobs:
#   deploy:
#     name: "Deploy bundle"
#     runs-on: ubuntu-latest
#     environment: prd
#     steps:
#       - uses: actions/checkout@v3

#       - uses: databricks/setup-cli@main

#       - run: databricks bundle deploy
#         working-directory: .
#         env:
#           DATABRICKS_TOKEN: ${{ secrets.DAB_SECRET }}
#           DATABRICKS_BUNDLE_ENV: prd
#
#   pipeline_update:
#     name: "Run pipeline update"
#     runs-on: ubuntu-latest

#     needs:
    #   - deploy
    # if: github.ref == 'refs/heads/promote_workflows_prd'  

#  

#       - uses: databricks/setup-cli@main

#       # - shell: bash
#       #   name: Run pipeline update
#       #   run: |
#       #     set -o pipefail
#       #     databricks bundle run dab_kontest_job --refresh-all 2>&1 | tee output.log
#       #   env:
#       #     DATABRICKS_TOKEN: ${{ secrets.DAB_SECRET }}
#       #     DATABRICKS_BUNDLE_ENV: dev

# name: hello-world
# on: push
# jobs:
#   my-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: my-step
#         run: echo "Hello World!"

name: workflows migration dev
concurrency: "1"
on:
  push:
    branches:
      - main
    paths:
      - "**/*.yml"

# jobs:
#   deploy:
#     name: "Deploy bundle"
#     runs-on: ubuntu-latest
#     environment: dev
#     steps:
#       - uses: actions/checkout@v3

#       - uses: databricks/setup-cli@main

#       - run: databricks bundle deploy
#         working-directory: .
#         env:
#           DATABRICKS_TOKEN: ${{secrets.DAB_SECRET}}
#           DATABRICKS_BUNDLE_ENV: dev
jobs:
  test:
    name: "automated testing"
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # - name: Set up Databricks CLI
      #   uses: databrickslabs/ci-databricks-cli-action@v1
      #   with:
      #     databricks-host: ${{ secrets.DATABRICKS_HOST }}
      #     databricks-token: ${{ secrets.DATABRICKS_TOKEN }}
      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main

      - name: Trigger Databricks testing job
        id: test-job
        
        run: |
            job_id="63243543003442"  # Replace with your testing job ID
            response=$(databricks jobs run-now $job_id)
            run_id=$(echo $response | jq -r '.run_id')
            echo "Test job run ID: $run_id"
            echo "RUN_ID=$run_id" >> $GITHUB_ENV
          #  echo "::set-output name=run_id::$run_id"
          # job_id="63243543003442"
          # run_id=$(databricks jobs run-now --job-id $job_id | jq -r '.run_id')
          # echo "Test job run ID: $run_id"
          # echo "::set-output name=run_id::$run_id"

      - name: Wait for test job to complete
        id: wait-for-test
        run: |
            run_id=${{ env.RUN_ID }}
            status="RUNNING"
            while [[ "$status" == "RUNNING" ]]; do
              response=$(databricks runs get --run-id $run_id)
              status=$(echo $response | jq -r '.state.result_state')
              echo "Test job status: $status"
              sleep 10
            done
            if [[ "$status" != "SUCCESS" ]]; then
              echo "Test job failed with status: $status"
              exit 1
            fi
        working-directory: .
        env:
            DATABRICKS_TOKEN: ${{secrets.DAB_SECRET}}
            DATABRICKS_BUNDLE_ENV: dev

      # - name: Wait for test job to complete
      #   id: wait-for-test
      #   run: |
      #     run_id=${{ steps.test-job.outputs.run_id }}
      #     status="RUNNING"
      #     while [[ "$status" == "RUNNING" ]]; do
      #       status=$(databricks runs get --run-id $run_id | jq -r '.state.result_state')
      #       echo "Test job status: $status"
      #       sleep 30
      #     done
      #     if [[ "$status" != "SUCCESS" ]]; then
      #       echo "Test job failed with status: $status"
      #       exit 1
      #     fi
